*vimcrypt.txt*	A simple framework for encryption and decryption in vim

Version: 0.1
Author: mwnx <mwnx@gmx.com>
License: MIT license  {{{
    Permission is hereby granted, free of charge, to any person obtaining
    a copy of this software and associated documentation files (the
    "Software"), to deal in the Software without restriction, including
    without limitation the rights to use, copy, modify, merge, publish,
    distribute, sublicense, and/or sell copies of the Software, and to
    permit persons to whom the Software is furnished to do so, subject to
    the following conditions:
    The above copyright notice and this permission notice shall be included
    in all copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
    OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
    MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
    IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
    CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
    TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
    SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
}}}

CONTENTS						*vimcrypt-contents*

Introduction		|vimcrypt-introduction|
Interface		|vimcrypt-interface|
  Commands		|vimcrypt-commands|
  Variables		|vimcrypt-variables|
Plugins			|vimcrypt-plugins|
  GPG			|gpg|
    Commands		|gpg-commands|
    Variables		|gpg-variables|
  OpenSSL		|ssl|
    Commands		|ssl-commands|
    Variables		|ssl-variables|
Bugs			|vimcrypt-bugs|

==============================================================================
INTRODUCTION					*vimcrypt-introduction*

*vimcrypt* is a small framework for reading and writing encrypted files
within vim. It comes with built-in support for:

- GPG (|gpg| plugin)
- OpenSSL (|ssl| plugin)

and is easily extensible.

It is useful for encrypting password files and other sensitive information,
using either symmetric (e.g. |ssl| and |gpg|) or asymmetric (e.g. |gpg|)
cryptography.

When you open an encrypted file or save an encrypted file, vim will forward
its contents to the appropriate encryption program (e.g. |gpg|), which will
–in most cases– prompt you for a passphrase.

==============================================================================
INTERFACE						*neocomplete-install*

------------------------------------------------------------------------------
COMMANDS						*vimcrypt-commands*

:VimcryptEnable						*:VimcryptEnable*
		Enable vimcrypt.

:VimcryptDisable					*:VimcryptDisable*
		Disable vimcrypt.

------------------------------------------------------------------------------
VARIABLES						*vimcrypt-variables*

g:vimcrypt_enable					*g:vimcrypt_enable*
		Whether to enable |vimcrypt| or not.
		To disable vimcrypt by default, add this to your |vimrc|:

			let g:vimcrypt_enable = 0

		Default value is 1.

g:vimcrypt_tries					*g:vimcrypt_tries*
		Number of times to ask for a password (in case of failures).

		Default value is 3.

g:vimcrypt_warn_about_backups		*g:vimcrypt_warn_about_backups*
		Whether to warn when an encrypted file is going to backed up
		(in ciphertext form) due to the 'backup' option.

		Default value is 1.

g:vimcrypt_encrypters				*g:vimcrypt_encrypters*
		List of functions returning returning an encryption shell
		command for the current file, or an empty string if they don't
		know how to encrypt the current format.

		Default: ['gpg#encrypt', 'ssl#encrypt']


g:vimcrypt_decrypters				*g:vimcrypt_decrypters*
		Same as above but for decryption.

		Default: ['gpg#decrypt', 'ssl#decrypt']

g:vimcrypt_fold					*g:vimcrypt_fold*
		The name of a function that will set up a folding environment.
		Useful for instance in the case that you have a file
		containing all your passwords and you don't wish for them to
		be revealed all at once. Set to '' if you don't want folding.

		Default: 'vimcrypt#fold#setup_pwdfold'

b:vimcrypt_fold					*b:vimcrypt_fold*
		Overrides the above if it exists.

==============================================================================
PLUGINS							*vimcrypt-plugins*

Two plugins are provided by default: |gpg| and |ssl|.

------------------------------------------------------------------------------
GPG							*gpg*

Use GPG for symmetric or asymmetric encryption.

The |gpg| plugin uses the filename extension and the output of the `file`
command to determine whether the file is a GPG encrypted file or not. Thus,
a GPG encrypted file does not have to bear any particular extension to be
detected as such by this plugin.

Still, the supported extensions are: `.gpg`, `.pgp`, and `.gnupg`.

COMMANDS						*gpg-commands*

:GPGEncrypt						*:GPGEncrypt*
		Encrypt the current file with gpg.
		Useful when dealing with a new GPG-encrypted-file-to-be which
		does not bear a `gpg`, `gnupg`, or `pgp` extension. Without
		using this command |:w| would of course save the file as
		plaintext in this situation.

VARIABLES						*gpg-variables*

g:gpg#encrypt_command				*g:gpg#encrypt_command*
		The command that will be used for GPG encryption.
		E.g.

			'gpg -r mwnx -e'

		Default: 'gpg --no-use-agent --cipher-algo AES256 --symmetric'

b:gpg#encrypt_command				*b:gpg#encrypt_command*
		Overrides the above if it exists.

------------------------------------------------------------------------------
OPENSSL							*ssl*

This plugin is designed to be compatible with Noah Spurrier
<noah@noah.org>'s ssl.vim plugin.

This plugin detects encryption and which cipher to use based solely on the
filename's extension. Note that openssl does not encode cipher information
within its files. Therefore, the extension must match the cipher exactly.

The supported ciphers are those returned by the 'openssl help' command, with
`aes` being an alias for 'aes-256-cbc', and an extra `a` appended to the
cipher meaning to use openssl's '-a' option to produce an ASCII armoured file.

Examples:

| Filename        | Command                  |
| --------------- | ------------------------ |
| auth.aes        | openssl aes-256-cbc      |
| auth.aesa       | openssl aes-256-cbc -a   |
| x.bash.bf-ofb   | openssl bf-ofb           |
| x.bash.bf-ofba  | openssl bf-ofb -a        |

COMMANDS						*ssl-commands*

:SSLEncrypt						*:SSLEncrypt*
		Provided for symmetry with |:GPGEncrypt|, but not really
		necessary since it does the same thing as |:w|.

VARIABLES						*ssl-variables*

g:ssl#aes_cipher					*g:ssl#aes_cipher*
		The cipher to use for the '.aes' file extension. If you change
		this, your vimcrypt won't be compatible with others with
		regards to the '.aes' extension.

		Default: 'aes-256-cbc'

b:ssl#aes_cipher					*b:ssl#aes_cipher*
		Overrides the above if it exists.

g:ssl#ciphers						*b:ssl#ciphers*
		List of supported ciphers (arguments to the openssl command).

		Default: output of 'openssl help' (openssl 1.0.1)

==============================================================================
SECURITY						*vimcrypt-security*

Vimcrypt disables viminfo, swapfile, and undofile before reading an encrypted
file. By default, warnings are also given about (ciphertext) backups. See
'g:vimcrypt_warn_about_backups'.

For protection against over the shoulder prying, a fold method is provided and
activated by default on encrypted files. It causes vim to show only the first
words of each paragraph upon opening a file. This behaviour can be customised
through 'g:vimcrypt_fold'.

==============================================================================
BUGS							*vimcrypt-bugs*

- Password retries don't work when reloading a file, e.g. with ':e'. If you
  fail the first time, the following tries are pointless. This is due to the
  use of |undo|.
